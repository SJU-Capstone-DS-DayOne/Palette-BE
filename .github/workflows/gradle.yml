name: Java CI with Gradle

# 동작 조건 설정: develop 브랜치에 push or pull request가 발생할 경우 동작
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 Docker Hub에 Push하는 과정
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    # 1. Java 21 세팅
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'

    # 2. gradlew 권한 부여
    - name: Run chmod to make gradlew executable
      run: chmod +x gradlew
    
    # 3. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      run: ./gradlew bootJar
      
    # 4. Docker 이미지 빌드 & Push
    - name: Docker Image Build & Push
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/palette .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/palette

  # 위 build-docker-image 작업에서 Push한 이미지를 EC2에서 Pull & Run시키는 과정 
  run-docker-image-on-ec2:
    # build-docker-image 작업이 완료되어야 실행됨
    needs: build-docker-image

    # self-hosted-runner에서 동작
    runs-on: self-hosted



    steps:
    - uses: actions/checkout@v4

    # 1. 최신 이미지 Pull
    - name: docker pull
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/palette
      
    # 2. 기존 컨테이너 중지
    - name: docker stop container
      run: docker stop $(docker ps -q) 2>/dev/null || true

    # 3. 최신 이미지 컨테이너화하여 실행시
    - name: docker run new container
      run: docker run --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/palette

    # 4. 미사용 이미지 정리
    - name: delete old docker image
      run: docker system prune -f
      
